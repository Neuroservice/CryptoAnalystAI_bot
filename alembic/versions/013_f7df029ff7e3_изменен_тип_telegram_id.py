"""изменен тип telegram_id

Revision ID: f7df029ff7e3
Revises: 99cd326837c3
Create Date: 2024-12-12 23:33:06.445250

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f7df029ff7e3'
down_revision: Union[str, None] = '99cd326837c3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('agentanswer', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('agentanswer_id_seq'::regclass)"))
    op.alter_column('agentanswer', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('agentanswer', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.create_foreign_key(None, 'agentanswer', 'project', ['project_id'], ['id'])
    op.alter_column('basic_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('basic_metrics_id_seq'::regclass)"))
    op.alter_column('basic_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('basic_metrics', 'sphere',
               existing_type=sa.TEXT(),
               type_=sa.String(length=150),
               existing_nullable=True)
    op.create_foreign_key(None, 'basic_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('calculation', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('calculation_id_seq'::regclass)"))
    op.alter_column('calculation', 'user_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('calculation', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('calculation', 'date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.create_foreign_key(None, 'calculation', 'user', ['user_id'], ['id'])
    op.create_foreign_key(None, 'calculation', 'project', ['project_id'], ['id'])
    op.alter_column('funds_profit', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('funds_profit_id_seq'::regclass)"))
    op.alter_column('funds_profit', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'funds_profit', 'project', ['project_id'], ['id'])
    op.alter_column('investing_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('investing_metrics_id_seq'::regclass)"))
    op.alter_column('investing_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'investing_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('manipulative_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('manipulative_metrics_id_seq'::regclass)"))
    op.alter_column('manipulative_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'manipulative_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('market_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('market_metrics_id_seq'::regclass)"))
    op.alter_column('market_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'market_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('network_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('network_metrics_id_seq'::regclass)"))
    op.alter_column('network_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'network_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('project', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('project', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('project', 'coin_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('social_metrics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('social_metrics_id_seq'::regclass)"))
    op.alter_column('social_metrics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.alter_column('social_metrics', 'twitterscore',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.create_foreign_key(None, 'social_metrics', 'project', ['project_id'], ['id'])
    op.alter_column('tokenomics', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False,
               autoincrement=True)
    op.alter_column('tokenomics', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'tokenomics', 'project', ['project_id'], ['id'])
    op.alter_column('top_and_bottom', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('top_and_bottom_id_seq'::regclass)"))
    op.alter_column('top_and_bottom', 'project_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               nullable=False)
    op.create_foreign_key(None, 'top_and_bottom', 'project', ['project_id'], ['id'])
    op.alter_column('user', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('user_id_seq'::regclass)"))
    op.alter_column('user', 'telegram_id',
               existing_type=sa.BIGINT(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_17108_user_pkey', 'user', ['id'], unique=True)
    op.alter_column('user', 'telegram_id',
               existing_type=sa.BIGINT(),
               nullable=True)
    op.alter_column('user', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('user_id_seq'::regclass)"))
    op.drop_constraint(None, 'top_and_bottom', type_='foreignkey')
    op.alter_column('top_and_bottom', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('top_and_bottom', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True,
               autoincrement=True,
               existing_server_default=sa.text("nextval('top_and_bottom_id_seq'::regclass)"))
    op.drop_constraint(None, 'tokenomics', type_='foreignkey')
    op.alter_column('tokenomics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('tokenomics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True,
               autoincrement=True)
    op.drop_constraint(None, 'social_metrics', type_='foreignkey')
    op.alter_column('social_metrics', 'twitterscore',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('social_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('social_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('social_metrics_id_seq'::regclass)"))
    op.create_index('unique_coin_name', 'project', ['coin_name'], unique=True)
    op.alter_column('project', 'coin_name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('project', 'category',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('project', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_constraint(None, 'network_metrics', type_='foreignkey')
    op.alter_column('network_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('network_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True,
               autoincrement=True,
               existing_server_default=sa.text("nextval('network_metrics_id_seq'::regclass)"))
    op.drop_constraint(None, 'market_metrics', type_='foreignkey')
    op.alter_column('market_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('market_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('market_metrics_id_seq'::regclass)"))
    op.drop_constraint(None, 'manipulative_metrics', type_='foreignkey')
    op.alter_column('manipulative_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('manipulative_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('manipulative_metrics_id_seq'::regclass)"))
    op.drop_constraint(None, 'investing_metrics', type_='foreignkey')
    op.alter_column('investing_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('investing_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('investing_metrics_id_seq'::regclass)"))
    op.drop_constraint(None, 'funds_profit', type_='foreignkey')
    op.alter_column('funds_profit', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('funds_profit', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True,
               autoincrement=True,
               existing_server_default=sa.text("nextval('funds_profit_id_seq'::regclass)"))
    op.drop_constraint(None, 'calculation', type_='foreignkey')
    op.drop_constraint(None, 'calculation', type_='foreignkey')
    op.create_index('idx_17118_calculation_pkey', 'calculation', ['id'], unique=True)
    op.alter_column('calculation', 'date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('calculation', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('calculation', 'user_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('calculation', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('calculation_id_seq'::regclass)"))
    op.drop_constraint(None, 'basic_metrics', type_='foreignkey')
    op.create_index('idx_17123_basic_metrics_pkey', 'basic_metrics', ['id'], unique=True)
    op.alter_column('basic_metrics', 'sphere',
               existing_type=sa.String(length=150),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('basic_metrics', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('basic_metrics', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('basic_metrics_id_seq'::regclass)"))
    op.drop_constraint(None, 'agentanswer', type_='foreignkey')
    op.alter_column('agentanswer', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('agentanswer', 'project_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               nullable=True)
    op.alter_column('agentanswer', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('agentanswer_id_seq'::regclass)"))
    # ### end Alembic commands ###
